// Online Java Compiler
// Use this editor to write, compile and run your Java code online
import java.util.*;

public class MedianOfSortedArray {
    
    // Generic method to get subarray of a non-primitive array
    // between specified indices
    public static<T> T[] subArray(T[] array, Integer beg, Integer end) {
        return Arrays.copyOfRange(array, beg, end);
    }
 
    
    public static void main(String[] args) {
        
        MedianOfSortedArray obj = new MedianOfSortedArray();
        //case 1
        Integer arr1[] = new Integer[]{1, 2, 3, 4, 5};
        Integer arr2[] = new Integer[]{6, 7, 8, 9, 10};
        double result1 = obj.medianOfTwoArraySameSize(arr1, arr2, arr1.length);
        System.out.println("medianOfTwoArraySameSize: " + result1);
        
        //cadse 2
        Integer arr3[] = new Integer[]{1, 2};
        Integer arr4[] = new Integer[]{2, 8};
        double result2 = obj.medianOfTwoArraySameSize(arr3, arr4, arr3.length);
        System.out.println("medianOfTwoArraySameSize: " + result2);

    }
    
    int median(Integer arr[], int n) {
        if (n % 2 == 0) {
            return (arr[n/2] + arr[n/2 -1])/2;
        }
        return arr[n/2];
    }
    
    double medianOfTwoArraySameSize(Integer arr1[], Integer arr2[], Integer size) {
        System.out.println("Arr1: " + Arrays.asList(arr1));
        System.out.println("Arr2: " + Arrays.asList(arr2));
        if (size < 1) {
            return -1;
        }
        if (size == 1) {
            return (arr1[0] + arr2[0])/2;
        }
        if (size == 2) {
            return (Math.max(arr1[0], arr2[0]) + Math.min(arr1[1], arr2[1]))/2.0;
        }
        int median1 = median(arr1, size);
        int median2 = median(arr2, size);
        if (median1 == median2) {
            return median1;
        }
        //median exist in 2nd part of arr1 and 1st part of arr2
        if (median1 < median2) {
            Integer arrNew[] = subArray(arr1, size/2, size);
            System.out.println("arrNew1: " + Arrays.asList(arrNew));
            if (size % 2 == 0) {
                
                return medianOfTwoArraySameSize(arrNew, arr2, size - size/2 + 1);
            }
            return medianOfTwoArraySameSize(arrNew, arr2, size - size/2);
        }
        
        //median exist in 1st part of arr1 and 2nd part of arr2
        Integer arrNew[] = subArray(arr2, size/2, size);
        System.out.println("arrNew2: " + Arrays.asList(arrNew));
        if (size % 2 == 0) {
            
            return medianOfTwoArraySameSize(arr1, arrNew, size - size/2 + 1);
        }
        return medianOfTwoArraySameSize(arr1, arrNew, size - size/2);
    }
}
